(define (turing-machine rules input)
  (let ((tape (string->list input))
        (head 0)
        (state "q0"))
    (define (step)
      (let ((new-state (car (assoc-ref rules (cons state (current-symbol)))))
            (new-symbol (cadr (assoc-ref rules (cons state (current-symbol)))))
            (direction (caddr (assoc-ref rules (cons state (current-symbol))))))
        (set-symbol! new-symbol)
        (set-state! new-state)
        (move! direction)
        'Done))

    (define (move! dir)
      (cond ((string=? dir "R")
             (set! head (1+ head)))
            ((string=? dir "L")
             (set! head (1- head)))))
    (define (set-state! new-state)
      (set! state new-state))
    (define (set-symbol! new-symbol)
      (list-set! tape head new-symbol))

    (define (current-symbol)
      (list-ref tape head))

    (define (show)
      (list tape head state))

    (define (dispatch op)
      (cond ((eq? op 'step) (step))
            ((eq? op 'show) (show))))
    dispatch))

(define rules '((("q0" . #\e) . ("q3" #\k "R"))
                (("q1" . #\l) . ("q4" #\e "L"))
                (("q3" . #\a) . ("q1" #\e "L"))))

(define tm (turing-machine rules "eajt"))
(tm 'step)
(display (tm 'show))
(display "\n")
(tm 'step)
(display (tm 'show))
